#!/bin/bash

export TERM=xterm-256color
setfont cyr-sun16 2>/dev/null

# Функция для вывода текста по центру экрана жёлтым цветом + отступ после
print_center() {
  local text="$1"
  local term_width=$(tput cols)
  local padding=$(( (term_width - ${#text}) / 2 ))

  # Создаем строку с отступами с помощью printf
  local padded_text=$(printf "%${padding}s" "")

  # Добавляем цвет к тексту и выводим всю строку с помощью echo -e
  echo -e "${padded_text}\e[1;33m${text}\e[0m${padded_text}"

  echo
  echo
}

show_progress() {
  local current=$1  # Текущее значение прогресса
  local total=$2    # Общее количество шагов
  local message="$3" # Сообщение, которое нужно отобразить

  # Цвета (ANSI escape-последовательности)
  local green=$'\e[32m'
  local gray=$'\e[90m'
  local reset=$'\e[0m'

  # Анимация (символы вращения)
  local spinner=("|" "/" "-" "\\")
  local spinner_index=$((current % ${#spinner[@]})) # Индекс текущего символа анимации
  local animation="${spinner[$spinner_index]}"

  # Вычисляем процент завершения
  local percentage=$(( (current * 100) / total ))

  # Создаем строку прогресс-бара
  local bar_length=100 # Длина прогресс-бара
  local filled_length=$(( (percentage * bar_length) / 100 ))
  local bar=""
  for (( i=0; i<filled_length; i++ )); do
    bar+="${green}=>"${reset}
  done
  for (( i=filled_length; i<bar_length; i++ )); do
    bar+="${gray} ${reset}"
  done

  # Выводим прогресс
  printf "\r%s [%s] %3d%% %s" "$animation" "$bar" "$percentage" "$message"

  # Если это последний шаг, добавляем перенос строки
  if [ "$current" -eq "$total" ]; then
    echo ""
  fi
}

total_steps=14

print_center"УСТАНОВКА СИСТЕМЫ"

sleep 4
# === Переменные ===
# Файловая система (ext4 или btrfs)
FILESYSTEM=""
# Часовой пояс
TIMEZONE=""
# Имя пользователя
USERNAME=""
# Пароль пользователя
USER_PASSWORD=""
# Имя хоста
HOSTNAME=""
# Диск для установки
DISK=""
# Размер раздела EFI
EFI_PARTITION_SIZE="512M"
# Размер корневого раздела (оставшееся место)
ROOT_PARTITION_SIZE="100%"

# === Функции ===

# Функция для вывода сообщения об ошибке и завершения скрипта
error_handler() {
  echo -e "\n\033[1;31mОшибка: $1\033[0m"
  exit 1
}

# Функция для скрытия вывода команды
run_silent() {
  "$@" > /dev/null 2>&1
}

# Функция для проверки, является ли команда успешной
check_command() {
  local command="$1"
  local error_message="$2"

  # Выполняем команду с помощью run_silent
  run_silent /bin/bash -c "$command"

  if [ $? -ne 0 ]; then
    error_handler "$error_message"
  fi
}

# Функция для выбора таймзоны (регион и город)
select_timezone() {
  echo -e "\n\033[1;32m=== ВЫБОР ЧАСОВОГО ПОЯСА ===\033[0m"
  echo""
  echo""
  # Проверка наличия timedatectl
  if ! command -v timedatectl &> /dev/null; then
    error_handler "Команда timedatectl не найдена. Установите systemd."
  fi

  echo -e "\033[1;33mВыберите регион:\033[0m"
  PS3="> "
  echo""
  echo""
  # Получаем список регионов, удаляем пустые строки и дубликаты
  REGIONS=($(timedatectl list-timezones | awk -F'/' '{print $1}' | sort -u | grep -v '^$' | tr -d '\r'))
  if [ ${#REGIONS[@]} -eq 0 ]; then
    error_handler "Не удалось получить список регионов. Проверьте вывод timedatectl list-timezones."
  fi
  select REGION in "${REGIONS[@]}"; do
    [[ -n $REGION ]] && break || echo -e "\033[1;31mНеверный выбор!\033[0m"
  done

  echo -e "\n\033[1;33mВыберите город:\033[0m"
  echo""
  echo""
  CITIES=($(timedatectl list-timezones | grep "^$REGION/" | awk -F'/' '{print $2}' | sort -u | grep -v '^$' | tr -d '\r'))
  if [ ${#CITIES[@]} -eq 0 ]; then
    error_handler "Не удалось получить список городов для региона $REGION. Проверьте вывод timedatectl list-timezones."
  fi
  select CITY in "${CITIES[@]}"; do
    [[ -n $CITY ]] && break || echo -e "\033[1;31mНеверный выбор!\033[0m"
  done

  TIMEZONE="$REGION/$CITY"
  echo -e "\n\033[1;32mВыбран часовой пояс: \033[1;33m$TIMEZONE\033[0m"
  echo""
}

# === Выбор файловой системы ===
print_center"=== ВЫБОР ФАЙЛОВОЙ СИСТЕМЫ ==="

while true; do
                                             read -p "\e[33mВыберите файловую систему (ext4 или btrfs):\e[0m" FILESYSTEM
  case $FILESYSTEM in
    ext4|btrfs)
      break
      ;;
    *)
      echo "Неверный выбор. Пожалуйста, выберите ext4 или btrfs."
      ;;
  esac
done

# === Выбор диска ===
print_center"=== ВЫБОР ДИСКА ==="

print_center"ДОСТУПНЫЕ ДИСКИ:"

lsblk -d -p -o NAME,SIZE,MODEL | grep -v "ROM\|loop\|sr0"

print_center"Введите полный путь к диску (например, /dev/sda или /dev/nvme0n1)"

read -p "> " DISK

# === Проверка существования диска ===
if [ ! -b "$DISK" ]; then
  error_handler "Диск $DISK не найден"
fi

sleep 4

# === Размонтирование диска, если он смонтирован ===
if mount | grep -q "$DISK"; then
print_center"Диск $DISK смонтирован. Размонтирую его..."

  # Попытка рекурсивного размонтирования
  umount -R /mnt 2>/dev/null

  if [ $? -ne 0 ]; then
print_center"Не удалось размонтировать диск $DISK с помощью umount -R /mnt. Пожалуйста, перезагрузите систему и попробуйте снова."

    exit 1
  fi

sleep 4

print_center"Диск $DISK успешно размонтирован."

fi

sleep 4
print_center"=== Запрос имени пользователя, пароля и имени хоста ==="
                                                       read -p "Введите имя пользователя: " USERNAME
echo""
echo""

                                                    read -s -p "Введите пароль пользователя: " USER_PASSWORD
echo""
echo""

                                                    read -s -p "Введите пароль root: " ROOT_PASSWORD
echo""
echo""

                                                      read -p "Введите имя хоста: " HOSTNAME
echo""
echo""

sleep 4
# === Выбор часового пояса ===
select_timezone

clear
sleep 4
echo""
echo""
show_progress 1 $total_steps "Создание разделов..."

sleep 6
# === Разметка диска ===

# Создание разделов с помощью parted
check_command "parted -s $DISK mklabel msdos" "Не удалось создать таблицу разделов"
check_command "parted -s $DISK mkpart primary fat32 1MiB ${EFI_PARTITION_SIZE}" "Не удалось создать раздел EFI"
check_command "parted -s $DISK set 1 boot on" "Не удалось установить флаг boot на раздел EFI"
check_command "parted -s $DISK mkpart primary ext4 ${EFI_PARTITION_SIZE} 100%" "Не удалось создать корневой раздел"

# === Определение разделов ===
if [[ $DISK =~ "nvme" ]]; then
    EFI_PART="${DISK}p1"
    ROOT_PART="${DISK}p2"
else
    EFI_PART="${DISK}1"
    ROOT_PART="${DISK}2"
fi

# Проверка существования разделов
if [ ! -b "$EFI_PART" ]; then
  echo -e "\033[1;31mРаздел EFI $EFI_PART не найден!\033[0m"
  error_handler "Раздел EFI $EFI_PART не найден"
fi
if [ ! -b "$ROOT_PART" ]; then
  echo -e "\033[1;31mКорневой раздел $ROOT_PART не найден!\033[0m"
  error_handler "Корневой раздел $ROOT_PART не найден"
fi

show_progress 2 $total_steps "Форматирование разделов..."

sleep 6
# форматирование разделов

if [ -d /sys/firmware/efi/ ]; then
  # Проверяем, отформатирован ли раздел EFI
  if ! blkid | grep -q "$EFI_PART: UUID="; then
   #echo "Форматирование раздела EFI ($EFI_PART) в FAT32"
    check_command "mkfs.vfat -F32 $EFI_PART" "Не удалось отформатировать раздел EFI"
 # else
   # echo "Раздел EFI ($EFI_PART) уже отформатирован"
  fi
fi

if [ "$FILESYSTEM" == "ext4" ]; then
    check_command "mkfs.ext4 $ROOT_PART" "Не удалось отформатировать корневой раздел в ext4"
elif [ "$FILESYSTEM" == "btrfs" ]; then
    check_command "mkfs.btrfs -f $ROOT_PART" "Не удалось отформатировать корневой раздел в btrfs"
else
    echo "Неподдерживаемая файловая система: $FILESYSTEM"
    exit 1
fi

show_progress 3 $total_steps "Монтирование разделов..."

sleep 6
# === Монтирование разделов ===
if [ "$FILESYSTEM" == "btrfs" ]; then
  # Монтирование корневого раздела (временное)
  check_command "mount $ROOT_PART /mnt" "Не удалось смонтировать корневой раздел"

  # Создание подтомов
  SUBVOLUMES="
    @
    @home
    @var
    @.snapshots
    @log
    @pkg
  "
  for SUBVOLUME in $SUBVOLUMES; do
    check_command "btrfs subvolume create /mnt/$SUBVOLUME" "Не удалось создать подтом $SUBVOLUME"
  done

  # Размонтирование корневого раздела
  check_command "umount -R /mnt" "Не удалось размонтировать корневой раздел"
sleep 2
  # Монтирование подтомов с опциями
  BTRFS_OPTIONS="rw,noatime,compress=zstd:2,ssd,space_cache=v2,discard=async"
  check_command "mount -o subvol=@,$BTRFS_OPTIONS $ROOT_PART /mnt" "Не удалось смонтировать подтом @"
  mkdir -p /mnt/{home,var,.snapshots}
  check_command "mount -o subvol=@home,$BTRFS_OPTIONS $ROOT_PART /mnt/home" "Не удалось смонтировать подтом @home"
  check_command "mount -o subvol=@var,$BTRFS_OPTIONS $ROOT_PART /mnt/var" "Не удалось смонтировать подтом @var"
  check_command "mount -o subvol=@.snapshots,$BTRFS_OPTIONS $ROOT_PART /mnt/.snapshots" "Не удалось смонтировать подтом @.snapshots"
  mkdir -p /mnt/var/{log,cache/pacman/pkg}
  check_command "mount -o subvol=@log,$BTRFS_OPTIONS $ROOT_PART /mnt/var/log" "Не удалось смонтировать подтом @log"
  check_command "mount -o subvol=@pkg,$BTRFS_OPTIONS $ROOT_PART /mnt/var/cache/pacman/pkg" "Не удалось смонтировать подтом @pkg"
else
  # Монтирование корневого раздела (ext4) с опциями
  EXT4_OPTIONS="noatime,discard,defaults"
  check_command "mount -o $EXT4_OPTIONS $ROOT_PART /mnt" "Не удалось смонтировать корневой раздел"
fi
sleep 2
# Монтирование раздела EFI
if [ -d /sys/firmware/efi/ ]; then
  mkdir -p /mnt/boot/efi
  check_command "mount $EFI_PART /mnt/boot/efi" "Не удалось смонтировать раздел EFI"
fi

show_progress 4 $total_steps "Настройка зеркал..."

sleep 4
check_command "pacman -S reflector --noconfirm" "Не удалось установить reflector"
check_command "reflector -c 'Russia,Belarus,Germany' --save /etc/pacman.d/mirrorlist" "Не удалось копирование"
check_command "pacman -Sy" "Не удалось обновление"

show_progress 5 $total_steps "Установка системы..."

sleep 2
# === Установка базовой системы ===
check_command "pacstrap -i /mnt base linux linux-firmware sudo nano networkmanager dhcpcd plasma-desktop sddm sddm-kcm gwenview dolphin kate power-profiles-daemon firefox packagekit-qt5 bluez bluez-utils konsole ark firefox firefox-i18n-ru btrfs-progs ttf-liberation noto-fonts-cjk noto-fonts-emoji intel-ucode amd-ucode  pacman-contrib grub grub-btrfs efibootmgr gst-plugins-bad gst-plugins-ugly gst-plugins-good gst-plugins-base --noconfirm" "Не удалось установить базовую систему и KDE Plasma"

show_progress 6 $total_steps "Генерация fstab..."

sleep 6
# === Генерация fstab ===
check_command "genfstab -U /mnt >> /mnt/etc/fstab" "Не удалось сгенерировать fstab"

# === Chroot-настройка ===

# Функция для выполнения команд в chroot и проверки результата
run_chroot() {
    local CMD="$1"
    run_silent arch-chroot /mnt /bin/bash -c "$CMD"
    if [ $? -ne 0 ]; then
        echo "Ошибка при выполнении: $CMD"
        exit 1
    fi
}

show_progress 7 $total_steps "Настройка местоположения и времени системы..."

sleep 6
#echo "Настройка часового пояса..."
run_chroot "ln -sf /usr/share/zoneinfo/$TIMEZONE /etc/localtime"

#echo "Установка аппаратных часов..."
run_chroot "hwclock --systohc"

show_progress 8 $total_steps "Локализация системы..."

sleep 6
#echo "Раскомментирование строк для русской локали..."
run_chroot "sed -i 's/#ru_RU.UTF-8 UTF-8/ru_RU.UTF-8 UTF-8/g' /etc/locale.gen"
run_chroot "sed -i 's/#en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/g' /etc/locale.gen"

#echo "Генерация локалей..."
run_chroot "locale-gen"

#echo "Установка LANG..."
run_chroot "echo LANG=ru_RU.UTF-8 > /etc/locale.conf"

#echo "Установка KEYMAP..."
run_chroot "echo KEYMAP=ru > /etc/vconsole.conf"

#echo "Установка FONT..."
run_chroot "echo 'FONT=cyr-sun16' >> /etc/vconsole.conf"

#echo "Установка имени хоста..."
run_chroot "echo \"$HOSTNAME\" > /etc/hostname"

#echo "Добавление localhost в hosts..."
run_chroot "echo \"127.0.0.1 localhost\" >> /etc/hosts"
run_chroot "echo \"::1       localhost\" >> /etc/hosts"

show_progress 9 $total_steps "Создание начального образа системы..."

sleep 4
#echo "Создание initramfs..."
run_chroot "mkinitcpio -P"

show_progress 10 $total_steps "Создание пользователя..."

sleep 6
#echo "Установка пароля root..."
run_chroot "echo \"root:$ROOT_PASSWORD\" | chpasswd"

#echo "Создание пользователя..."
run_chroot "useradd -m -G wheel -s /bin/bash \"$USERNAME\""

#echo "Установка пароля пользователя..."
run_chroot "echo \"$USERNAME:$USER_PASSWORD\" | chpasswd"

#echo "Настройка sudo..."
run_chroot "echo \"%wheel ALL=(ALL) ALL\" >> /etc/sudoers"

show_progress 11 $total_steps "Настройка пакетного менеджера..."

sleep 6
#echo "Включение multilib репозитория..."
run_chroot "sed -i '/^#\[multilib\]/,/^#Include/ s/^#//' /etc/pacman.conf"
#echo "Добавление опций Color и ILoveCandy..."
run_chroot "sed -i 's/#Color/Color/' /etc/pacman.conf"
run_chroot "sed -i '/^Color/a ILoveCandy' /etc/pacman.conf"
run_chroot "pacman -Sy"

show_progress 12 $total_steps "Установка и настройка загрузчика..."

sleep 6

if [ -d /sys/firmware/efi/ ]; then
    #echo "Установка GRUB (EFI)..."
    run_chroot "grub-install --target=x86_64-efi --efi-directory=/boot/efi --bootloader-id=GRUB --no-nvram --removable /dev/$DISK"
    #echo "Генерация grub.cfg (EFI)..."
    run_chroot "grub-mkconfig -o /boot/grub/grub.cfg"
fi

show_progress 13 $total_steps "Запуск необходимых служб..."

sleep 6
#echo "Включение NetworkManager..."
run_chroot "systemctl enable NetworkManager"

#echo "Включение SDDM..."
run_chroot "systemctl enable sddm"

show_progress 14 $total_steps "Завершение настройки..."

sleep 6
# === Выход из chroot ===
#echo "Выход из chroot..."
arch-chroot /mnt /bin/bash -c "exit"

# === Размонтирование ===
#echo "Размонтирование /mnt..."
umount -R /mnt
sleep 2

print_center"Система успешно установлена!"

sleep 4
# === Перезагрузка ===
print_center"Перезагрузка системы..."
#reboot
