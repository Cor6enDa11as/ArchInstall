#!/bin/bash


setfont cyr-sun16 2>/dev/null

echo -e "\033[1;33mУстановка\033[0m"


# === Переменные ===
# Файловая система (ext4 или btrfs)
FILESYSTEM=""
# Часовой пояс
TIMEZONE=""
# Имя пользователя
USERNAME=""
# Пароль пользователя
USER_PASSWORD=""
# Имя хоста
HOSTNAME=""
# Диск для установки
DISK=""
# Размер раздела EFI
EFI_PARTITION_SIZE="512M"
# Размер корневого раздела (оставшееся место)
ROOT_PARTITION_SIZE="100%"

# === Функции ===

# Функция для вывода сообщения об ошибке и завершения скрипта
error_handler() {
  echo -e "\n\033[1;31mОшибка: $1\033[0m"
  exit 1
}

# Функция для проверки, является ли команда успешной
check_command() {
  $1
  if [ $? -ne 0 ]; then
    error_handler "$2"
  fi
}

# Функция для выбора таймзоны (регион и город)
select_timezone() {
  echo -e "\n\033[1;32m=== ВЫБОР ЧАСОВОГО ПОЯСА ===\033[0m"

  # Проверка наличия timedatectl
  if ! command -v timedatectl &> /dev/null; then
    error_handler "Команда timedatectl не найдена. Установите systemd."
  fi

  echo -e "\033[1;33mВыберите регион:\033[0m"
  PS3="> "
  # Получаем список регионов, удаляем пустые строки и дубликаты
  REGIONS=($(timedatectl list-timezones | awk -F'/' '{print $1}' | sort -u | grep -v '^$' | tr -d '\r'))
  if [ ${#REGIONS[@]} -eq 0 ]; then
    error_handler "Не удалось получить список регионов. Проверьте вывод timedatectl list-timezones."
  fi
  select REGION in "${REGIONS[@]}"; do
    [[ -n $REGION ]] && break || echo -e "\033[1;31mНеверный выбор!\033[0m"
  done

  echo -e "\n\033[1;33mВыберите город:\033[0m"
  CITIES=($(timedatectl list-timezones | grep "^$REGION/" | awk -F'/' '{print $2}' | sort -u | grep -v '^$' | tr -d '\r'))
  if [ ${#CITIES[@]} -eq 0 ]; then
    error_handler "Не удалось получить список городов для региона $REGION. Проверьте вывод timedatectl list-timezones."
  fi
  select CITY in "${CITIES[@]}"; do
    [[ -n $CITY ]] && break || echo -e "\033[1;31mНеверный выбор!\033[0m"
  done

  TIMEZONE="$REGION/$CITY"
  echo -e "\n\033[1;32mВыбран часовой пояс: \033[1;33m$TIMEZONE\033[0m"
}

# === Выбор файловой системы ===
while true; do
  read -p "Выберите файловую систему (ext4 или btrfs): " FILESYSTEM
  case $FILESYSTEM in
    ext4|btrfs)
      break
      ;;
    *)
      echo "Неверный выбор. Пожалуйста, выберите ext4 или btrfs."
      ;;
  esac
done

# === Выбор диска ===
echo -e "\n\033[1;32m=== ВЫБОР ДИСКА ===\033[0m"
echo -e "\033[1;33mДоступные диски:\033[0m"
lsblk -d -p -o NAME,SIZE,MODEL | grep -v "ROM\|loop\|sr0"
echo -e "\n\033[1;33mВведите полный путь к диску (например, /dev/sda или /dev/nvme0n1):\033[0m"
read -p "> " DISK

# === Проверка существования диска ===
if [ ! -b "$DISK" ]; then
  error_handler "Диск $DISK не найден"
fi

# === Размонтирование диска, если он смонтирован ===
if mount | grep -q "$DISK"; then
  echo -e "\033[1;33mДиск $DISK смонтирован. Размонтирую его...\033[0m"
  # Попытка рекурсивного размонтирования
  umount -R /mnt 2>/dev/null
  if [ $? -ne 0 ]; then
    echo -e "\033[1;31mНе удалось размонтировать диск $DISK с помощью umount -R /mnt. Пожалуйста, перезагрузите систему и попробуйте снова.\033[0m"
    exit 1
  fi
  echo -e "\033[1;32mДиск $DISK успешно размонтирован.\033[0m"
fi

# === Разметка диска ===
echo -e "\n\033[1;32m=== РАЗМЕТКА ДИСКА ===\033[0m"
echo -e "\033[1;33mСоздание разделов на $DISK...\033[0m"

# Создание разделов с помощью parted
check_command "parted -s $DISK mklabel msdos" "Не удалось создать таблицу разделов"
check_command "parted -s $DISK mkpart primary fat32 1MiB ${EFI_PARTITION_SIZE}" "Не удалось создать раздел EFI"
check_command "parted -s $DISK set 1 boot on" "Не удалось установить флаг boot на раздел EFI"
check_command "parted -s $DISK mkpart primary ext4 ${EFI_PARTITION_SIZE} 100%" "Не удалось создать корневой раздел"

# Вывод таблицы разделов
echo -e "\n\033[1;33mТаблица разделов после parted:\033[0m"
fdisk -l $DISK

# Задержка, чтобы разделы появились в системе
sleep 2

# === Определение разделов ===
if [[ $DISK =~ "nvme" ]]; then
    EFI_PART="${DISK}p1"
    ROOT_PART="${DISK}p2"
else
    EFI_PART="${DISK}1"
    ROOT_PART="${DISK}2"
fi

# Проверка существования разделов
if [ ! -b "$EFI_PART" ]; then
  echo -e "\033[1;31mРаздел EFI $EFI_PART не найден!\033[0m"
  error_handler "Раздел EFI $EFI_PART не найден"
fi
if [ ! -b "$ROOT_PART" ]; then
  echo -e "\033[1;31mКорневой раздел $ROOT_PART не найден!\033[0m"
  error_handler "Корневой раздел $ROOT_PART не найден"
fi

# === Форматирование разделов ===
if [ -d /sys/firmware/efi/ ]; then
    check_command "mkfs.vfat -F32 $EFI_PART" "Не удалось отформатировать раздел EFI"
fi
check_command "mkfs.$FILESYSTEM -f $ROOT_PART" "Не удалось отформатировать корневой раздел"

# === Монтирование разделов ===
if [ "$FILESYSTEM" == "btrfs" ]; then
  # Монтирование корневого раздела (временное)
  check_command "mount $ROOT_PART /mnt" "Не удалось смонтировать корневой раздел"

  # Создание подтомов
  SUBVOLUMES="
    @
    @home
    @var
    @.snapshots
    @log
    @pkg
  "
  for SUBVOLUME in $SUBVOLUMES; do
    check_command "btrfs subvolume create /mnt/$SUBVOLUME" "Не удалось создать подтом $SUBVOLUME"
  done

  # Размонтирование корневого раздела
  check_command "umount /mnt" "Не удалось размонтировать корневой раздел"

  # Монтирование подтомов с опциями
  BTRFS_OPTIONS="noatime,compress=zstd:2,ssd,space_cache=v2,discard=async"
  check_command "mount -o subvol=@,$BTRFS_OPTIONS $ROOT_PART /mnt" "Не удалось смонтировать подтом @"
  mkdir -p /mnt/{home,var,.snapshots,log,pkg}
  check_command "mount -o subvol=@home,$BTRFS_OPTIONS $ROOT_PART /mnt/home" "Не удалось смонтировать подтом @home"
  check_command "mount -o subvol=@var,$BTRFS_OPTIONS $ROOT_PART /mnt/var" "Не удалось смонтировать подтом @var"
  check_command "mount -o subvol=@.snapshots,$BTRFS_OPTIONS $ROOT_PART /mnt/.snapshots" "Не удалось смонтировать подтом @.snapshots"
  check_command "mount -o subvol=@log,$BTRFS_OPTIONS $ROOT_PART /mnt/log" "Не удалось смонтировать подтом @log"
  check_command "mount -o subvol=@pkg,$BTRFS_OPTIONS $ROOT_PART /mnt/pkg" "Не удалось смонтировать подтом @pkg"
else
  # Монтирование корневого раздела (ext4) с опциями
  EXT4_OPTIONS="noatime,discard,ssd,defaults"
  check_command "mount -o $EXT4_OPTIONS $ROOT_PART /mnt" "Не удалось смонтировать корневой раздел"
fi

# Монтирование раздела EFI
if [ -d /sys/firmware/efi/ ]; then
  mkdir -p /mnt/boot/efi
  check_command "mount $EFI_PART /mnt/boot/efi" "Не удалось смонтировать раздел EFI"
fi

# === Запрос имени пользователя, пароля и имени хоста ===
read -p "Введите имя пользователя: " USERNAME
read -s -p "Введите пароль пользователя: " USER_PASSWORD
echo    # Добавляем перевод строки после ввода пароля
read -s -p "Введите пароль root: " ROOT_PASSWORD
echo    # Добавляем перевод строки после ввода пароля
read -p "Введите имя хоста: " HOSTNAME

# === Выбор часового пояса ===
select_timezone

# === Установка базовой системы ===
check_command "pacstrap /mnt base linux linux-firmware vim networkmanager dhcpcd plasma-desktop konsole firefox firefox-i18n-ru ttf-liberation noto-fonts-cjk noto-fonts-emoji" "Не удалось установить базовую систему и KDE Plasma"

# === Генерация fstab ===
check_command "genfstab -U /mnt >> /mnt/etc/fstab" "Не удалось сгенерировать fstab"


# === Chroot-настройка ===
check_command "arch-chroot /mnt /bin/bash -c 'ln -sf /usr/share/zoneinfo/$TIMEZONE /etc/localtime'" "Не удалось установить часовой пояс"
check_command "arch-chroot /mnt /bin/bash -c 'hwclock --systohc'" "Не удалось установить аппаратные часы"

# Раскомментируем строки для русской локали в /etc/locale.gen
check_command "arch-chroot /mnt /bin/bash -c 'sed -i \"s/#ru_RU.UTF-8 UTF-8/ru_RU.UTF-8 UTF-8/g\" /etc/locale.gen'" "Не удалось раскомментировать ru_RU.UTF-8"
check_command "arch-chroot /mnt /bin/bash -c 'sed -i \"s/#ru_RU ISO-8859-5/ru_RU ISO-8859-5/g\" /etc/locale.gen'" "Не удалось раскомментировать ru_RU ISO-8859-5"
check_command "arch-chroot /mnt /bin/bash -c 'sed -i \"s/#en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/g\" /etc/locale.gen'" "Не удалось раскомментировать en_US.UTF-8"

check_command "arch-chroot /mnt /bin/bash -c 'locale-gen'" "Не удалось сгенерировать локали"
check_command "arch-chroot /mnt /bin/bash -c 'echo LANG=ru_RU.UTF-8' > /mnt/etc/locale.conf" "Не удалось установить LANG"
check_command "arch-chroot /mnt /bin/bash -c 'echo KEYMAP=ru' > /mnt/etc/vconsole.conf" "Не удалось установить KEYMAP"
check_command "arch-chroot /mnt /bin/bash -c 'echo \"$HOSTNAME\" > /etc/hostname'" "Не удалось установить имя хоста"
check_command "arch-chroot /mnt /bin/bash -c 'echo \"127.0.0.1 localhost\" >> /etc/hosts'" "Не удалось добавить localhost в hosts"
check_command "arch-chroot /mnt /bin/bash -c 'echo \"::1       localhost\" >> /etc/hosts'" "Не удалось добавить localhost в hosts (IPv6)"
check_command "arch-chroot /mnt /bin/bash -c 'mkinitcpio -P'" "Не удалось создать initramfs"
check_command "arch-chroot /mnt /bin/bash -c 'echo \"root:$ROOT_PASSWORD\" | chpasswd'" "Не удалось установить пароль root"
check_command "arch-chroot /mnt /bin/bash -c 'useradd -m -g users -G wheel -s /bin/bash \"$USERNAME\"'" "Не удалось создать пользователя"
check_command "arch-chroot /mnt /bin/bash -c 'echo \"$USERNAME:$USER_PASSWORD\" | chpasswd'" "Не удалось установить пароль пользователя"
check_command "arch-chroot /mnt /bin/bash -c 'echo \"%wheel ALL=(ALL) ALL\" >> /etc/sudoers'" "Не удалось настроить sudo"

# Добавление multilib репозитория
check_command "arch-chroot /mnt /bin/bash -c 'sed -i \"/$$multilib$$/,/Include/ s/^#//\" /etc/pacman.conf'" "Не удалось включить multilib"

# Добавление опций Color и ILoveCandy в pacman.conf
check_command "arch-chroot /mnt /bin/bash -c 'sed -i \"/$$options$$/a Color\\nILoveCandy\" /etc/pacman.conf'" "Не удалось добавить опции Color и ILoveCandy"

# Проверка наличия необходимых пакетов для GRUB
if [ -d /sys/firmware/efi/ ]; then
    # EFI
    check_command "arch-chroot /mnt /bin/bash -c 'pacman -S --noconfirm efibootmgr dosfstools'" "Не удалось установить efibootmgr и dosfstools"
    check_command "arch-chroot /mnt /bin/bash -c 'grub-install --target=x86_64-efi --efi-directory=/boot/efi --bootloader-id=GRUB'" "Не удалось установить GRUB (EFI)"
    check_command "arch-chroot /mnt /bin/bash -c 'grub-mkconfig -o /boot/grub/grub.cfg'" "Не удалось сгенерировать grub.cfg (EFI)"
else
    # BIOS
    check_command "arch-chroot /mnt /bin/bash -c 'grub-install $DISK'" "Не удалось установить GRUB (BIOS)"
    check_command "arch-chroot /mnt /bin/bash -c 'grub-mkconfig -o /boot/grub/grub.cfg'" "Не удалось сгенерировать grub.cfg (BIOS)"
fi

check_command "arch-chroot /mnt /bin/bash -c 'systemctl enable NetworkManager'" "Не удалось включить NetworkManager"
check_command "arch-chroot /mnt /bin/bash -c 'systemctl enable sddm'" "Не удалось включить sddm"

# === Размонтирование разделов ===
echo -e "\n\033[1;32m=== Размонтирование разделов ===\033[0m"
if [ -d /sys/firmware/efi/ ]; then
    check_command "umount /mnt/boot/efi" "Не удалось размонтировать раздел EFI"
fi
check_command "umount /mnt/home" "Не удалось размонтировать раздел /home"
check_command "umount /mnt/var" "Не удалось размонтировать раздел /var"
check_command "umount /mnt/.snapshots" "Не удалось размонтировать раздел /.snapshots"
check_command "umount /mnt/log" "Не удалось размонтировать раздел /log"
check_command "umount /mnt/pkg" "Не удалось размонтировать раздел /pkg"
check_command "umount /mnt" "Не удалось размонтировать корневой раздел"

# === Перезагрузка ===
echo -e "\n\033[1;32m=== Перезагрузка системы ===\033[0m"
echo -e "\033[1;33mПерезагрузка...\033[0m"
reboot
